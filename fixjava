#!/bin/bash
# Author: Cody Lane
# Date: 07-17-20313
# 
# A neat little script to fix the web-browser plugin in OSX.
# I know it is poorly written, time is limited. :)
# Please file bugs if you have problems.

# GLOBAL VARIABLES
APPLE_JAVA_PLUGIN_DIR="/System/Library/Java/Support/Deploy.bundle/Contents/Resources/JavaPlugin2_NPAPI.plugin"
JAVA_PLUGIN="JavaAppletPlugin.plugin"

NPAPI_PLUGIN="JavaPlugin2_NPAPI.plugin"

err() {
    echo "ERR $* exiting"
    exit 1
}

get_java_version() {
    ## java version "1.7.0_45"
    echo $(java -version 2>&1 | grep 'version' | awk '{print $3}' | sed -e 's/"//g')
}

is_java_installed() {
    JAVA=$(which java)
    [ -z "$JAVA" ] && return 0
    return 1
}

get_now() {
    echo $(date +%Y%m%d%H%M%S)
}

backup_old_java() {
    cd /Library/Internet\ Plug-Ins/

    [ ! -d disabled ] && mkdir disabled

    if [ -L "$JAVA_PLUGIN" ]; then
        PLUGIN_SOURCE=$(readlink $JAVA_PLUGIN)
        ln -sf ${PLUGIN_SOURCE} disabled/${JAVA_PLUGIN}.$(get_now)

        # unlink the old, get the source directory, 
        unlink "$JAVA_PLUGIN"
    elif [ -d "$JAVA_PLUGIN" ]; then
        mv "$JAVA_PLUGIN" "distabled/${JAVA_PLUGIN}.$(get_now)"
    elif [ -L "$NPAPI_PLUGIN" ]; then
        PLUGIN_SOURCE=$(readlink $NPAPI_PLUGIN)
        ln -sf ${PLUGIN_SOURCE} disabled/${JAVA_PLUGIN}.$(get_now)

        # unlink the old, get the source directory, 
        unlink "$NPAPI_PLUGIN"
    fi

    cd /usr/bin
    if [ -L /usr/bin/javaws ]; then
        JAVAWS_SOURCE=$(readlink /usr/bin/javaws)
        ln -sf /usr/bin/javaws.$(get_now)
    elif [ -f /usr/bin/javaws ]; then
        cp /usr/bin/javaws /usr/bin/javaws.$(get_now)
    fi

    # remove the old cache directories for all users on the system
    CACHE_DIRS=$(sudo find /Users -name "Java" -type d | grep Caches)
    for CACHE_DIR in $CACHE_DIRS
    do
        echo "Removing cache directory: $CACHE_DIR"
    done

}   

java_16_fixes() {
    backup_old_java
    cd /Library/Internet\ Plug-Ins/

    ln -sf $APPLE_JAVA_PLUGIN_DIR "$NPAPI_PLUGIN"
}

java_17_fixes() {
    backup_old_java
    cd /Library/Internet\ Plug-Ins/

    # prefer oracle java
    if [ -d "/Library/Application Support/Oracle/Java" ]; then
        ln -sf /Library/Internet\ Plug-Ins/$JAVA_PLUGIN/Contents/Home/bin/javaws /usr/bin/javaws
    elif [ -f /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javaws ]; then
        ln -sf /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javaws /usr/bin/javaws
    fi
}

use_apple_java() {
    backup_old_java
    cd /Library/Internet\ Plug-Ins/

    # relink java plugin
    [ ! -d "$APPLE_JAVA_PLUGIN_DIR" ] && err "Apple java doesn't appear to be installed, because this directory '$APPLE_JAVA_PLUGIN_DIR' doesn't exist"
    ln -sf "$APPLE_JAVA_PLUGIN_DIR" "$JAVA_PLUGIN"

    if [ -L /System/Library/Frameworks/JavaVM.framework/Commands/javaws ]; then
        ln -sf /System/Library/Frameworks/JavaVM.framework/Commands/javaws /usr/bin/javaws
    elif [ -f /System/Library/Java/Support/Deploy.bundle/Contents/MacOS/javaws ]; then
        ln -sf /System/Library/Java/Support/Deploy.bundle/Contents/MacOS/javaws /usr/bin/javaws
    else
        err "Apple java doesn't appear to be installed"
    fi
}

usage() {
    CMD="${0##*/}"
    echo "USAGE: ${CMD} <version>" 
    echo ""
    echo "[validation]"
    echo "To validate the version of java you expect vs what is installed run: $CMD validate"
    echo ""
    echo "[version]"
    echo "To use apple-java: ${CMD} apple-java"
    echo "To force it to use 1.7, if installed: ${CMD} 1.7"
    echo "To force it to use 1.6, if installed: ${CMD} 1.6"
    echo ""
    echo "Otherwise, if java is installed on your machine, it will"
    echo "try to automatically determine the version and hopefully"
    echo "fix your java environment"

    exit 0
}

validate_java() {
    local CURR_JAVA_VERSION=$(get_java_version)

    ## 1.7.0_45 -> 1.7
    local EXPECTED_JAVA_VERSION=${CURR_JAVA_VERSION%.*}

    [ -z "$EXPECTED_JAVA_VERSION" ] && err "Unable to determine current version of java on your computer, got '$EXPECTED_JAVA_VERSION'"

    # test java version
    [ "$VERSION" == "apple-java" ] && VERSION="1.6"
    [ "$VERSION" != "$EXPECTED_JAVA_VERSION" ] && err "Expected version '$VERSION' should match '$EXPECTED_JAVA_VERSION'"


    cd /Library/Internet\ Plug-Ins/

    case $VERSION in
        1.6*)
            [ ! -L "$NPAPI_PLUGIN" ] && err "Expected link name to be '$NPAPI_PLUGIN' to be in $(pwd)"
            echo "OK: $NPAPI_PLUGIN is a link"

            LINK_SRC=$(readlink "$NPAPI_PLUGIN")
            [ -z "$LINK_SRC" ] && err "Expected java plugin '$NPAPI_PLUGIN' to be in $(pwd)"

            [ "$LINK_SRC" != "$APPLE_JAVA_PLUGIN_DIR" ] && err "Expected link source -> '$APPLE_JAVA_PLUGIN_DIR' not '$LINK_SRC'"
            echo "OK: $LINK_SRC -> $APPLE_JAVA_PLUGIN_DIR"
            ;;

        1.7*)
            [ -L "$NPAPI_PLUGIN" ] && err "Expected plugin '$NPAPI_PLUGIN' to not be a link be in $(pwd)"
            echo "OK: $NPAPI_PLUGIN is not a link"

            JAVAWS_SRC=$(readlink /usr/bin/javaws)
            if [ "$JAVAWS_SRC" == "/Library/Internet\ Plug-Ins/$JAVA_PLUGIN/Contents/Home/bin/javaws" ]; then
                echo "OK: /usr/bin/javaws link -> /Library/Internet\ Plug-Ins/$JAVA_PLUGIN/Contents/Home/bin/javaws" 
            elif [ "$JAVAWS_SRC" == "/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javaws" ]; then
                echo "OK: /usr/bin/javaws link -> /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javaws"
            else
                err "Expected /usr/bin/javaws -> '/Library/Internet\ Plug-Ins/$JAVA_PLUGIN/Contents/Home/bin/javaws' or '/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/javaws', not '$JAVAWS_SRC'"
            fi

            ;;
    esac

    exit 0
}

## main ##
export VERSION

is_java_installed && err "Java doesn't appear to be installed on your system, please do so and then re-run this script"

# determine java version automatically
[ -z "$VERSION" ] && VERSION=$(get_java_version | cut -d"." -f1-2)
[ -z "$VERSION" ] && err "Unable to determine java version, unable to continue"

# use command line java version
while [ -n "#{1%%*-}" ]
do

    OPT="$1"
    shift 

    [ -z "$OPT" ] && break

    case "$OPT" in
        usage|help|--help|-h)
            usage
            ;;
        validate)
            VALIDATE_JAVA="1"
            ;;
        *)
            VERSION="$OPT"
            ;;
    esac

done

#echo "[DEBUG]:"
#echo " VALIDATE_JAVA=$VALIDATE_JAVA"
#echo " VERSION=$VERSION"
#echo 

# validate the java version and exit
[ -n "$VALIDATE_JAVA" ] && [ -n "$VERSION" ] && validate_java

WHOAMI=$(whoami)

[ "$WHOAMI" != "root" ] && err "You need to run this command as root"

case "$VERSION" in
    1.6*)
        java_16_fixes
        ;;
    1.7*)
        java_17_fixes
        ;;
    apple-java)
        VERSION="1.6"
        use_apple_java
      ;;
    *)
        err "Sorry, but java version '$VERSION' is not currently supported"
        ;;
esac

